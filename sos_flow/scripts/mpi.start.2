#!/bin/bash
if [ "x${SOS_ROOT}" == "x" ] ; then
  echo "Please set the SOS_ROOT environment variable."
  kill -INT $$
fi
if [ "x${SOS_WORK}" == "x" ] ; then
  echo "Please set the SOS_WORK environment variable."
  kill -INT $$
fi
if [ "x${SOS_CMD_PORT}" == "x" ] ; then
  echo "Please set the SOS_CMD_PORT environment variable."
  kill -INT $$
fi
if [ "x${SOS_BUILD_DIR}" == "x" ] ; then
  echo "Please source the setenv.sh script for your environment."
  kill -INT $$
fi
if [ "x${SOS_ENV_SET}" == "x" ] ; then
  echo "Please configure your environment for SOS.   (source <sos_root>/hosts/<hostname>/setenv.sh)"
  kill -INT $$
fi
mkdir -p $SOS_WORK
if [ -z $1 ]; then echo ""; echo "*** SHUTOFF: Halting already running daemons..."; echo ""; fi;
${SOS_ROOT}/scripts/mpi.kill.2
if [ -z $1 ]; then echo ""; echo "*** CLEANUP: Removing data files from existing sosd daemons..."; echo ""; fi;
${SOS_ROOT}/scripts/mpi.cleanall
if [ -z $1 ]; then echo ""; echo "*** >>>>>>>: Launching the sosd daemons..."; echo ""; fi;

proc_count="2"
daemons="  ${SOS_BUILD_DIR}/bin/sosd -l 1 -a 1 -w ${SOS_WORK}   "
sosa_mods=""
#sosa_mods="${sosa_mods} : -np 1 ${SOS_BUILD_DIR}/bin/sosa_extract_kmean_2d -d 20000000 -o ${SOS_WORK}/kmean_2d.csv " 

#proc_count="3"
valgrind_cmd=""
#valgrind_cmd="gdb -ex run --args "
#valgrind_cmd="valgrind --vgdb=yes --vgdb-error=0 "
#valgrind_cmd="valgrind "
#valgrind_cmd="valgrind --tool=memcheck --leak-check=full --max-stackframe=3097792 --show-reachable=yes --error-limit=no --log-file=${SOS_WORK}/sosd.valgrind.log --show-leak-kinds=all --track-origins=yes --trace-children=yes "
#valgrind_cmd="valgrind --tool=memcheck --leak-check=full --track-origins=yes --trace-children=yes --log-file=${SOS_WORK}/sosd.valgrind.log "

if [ "x${valgrind_cmd}" == "x" ] ; then
  echo ""
else
    echo "VALGRIND:"
    echo "VALGRIND: Monitoring the SOSflow daemon.  Output file: sosd.valgrind.log"
    echo "VALGRIND:"
    echo "VALGRIND: valgrind_cmd = ${valgrind_cmd}"
    echo "VALGRIND:"
fi

echo "=========="
echo "Launch command:"
echo ""
echo "mpirun -np ${proc_count}  ${valgrind_cmd} ${daemons}"
echo ""
echo "=========="
echo ""

if [ "x${valgrind_cmd}" == "x" ] ; then
    # Run the program normally.
    mpirun -np ${proc_count} ${valgrind_cmd} ${daemons}
else
    # Run the program in an xterm w/debugging options...

        xterm="xterm -hold -e ${valgrind_cmd} "
        if [ "x${sosa_mods}" == "x" ] ; then
            mpirun -np ${proc_count} xterm -e ${valgrind_cmd} ${daemons}
        else
            mpirun -np ${proc_count} xterm -e ${valgrind_cmd} ${daemons}
        fi
fi




